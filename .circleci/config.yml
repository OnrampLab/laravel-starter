version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-eks: circleci/aws-eks@1.0.0
  kustomize: finc/kustomize@0.0.2

defaults: &defaults
  working_directory: ~/app
  docker:
    - image: cimg/php:8.2.2
    - image: cimg/mysql:8.0
      command: [--default-authentication-plugin=mysql_native_password]
      environment:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: testing_db
    - image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
      environment:
        - cluster.name: group-project-test-cluster
        - xpack.security.enabled: false
        - transport.host: localhost
        - network.host: 127.0.0.1
        - http.port: 9200
        - discovery.type: single-node
        - ES_JAVA_OPTS: "-Xms256m -Xmx512m"


commands:

  run_phpcs_phpstan:
    description: 'run PHPCS and PHPSTAN'
    steps:
      - run:
          name: Run PHPCS
          command: |
            if [[ "${CIRCLE_BRANCH}" != "master" ]] && [[ "${CIRCLE_BRANCH}" != "release" ]] && [[ -z "${CIRCLE_TAG}" ]]; then
              tools/scripts/phpcs-pr.sh
            fi
      - run:
          name: Run PHPStan analysis
          command: |
            if [[ "${CIRCLE_BRANCH}" != "master" ]] && [[ "${CIRCLE_BRANCH}" != "release" ]] && [[ -z "${CIRCLE_TAG}" ]]; then
              tools/scripts/phpstan-pr.sh
            fi
      - run:
          name: Run PHPStan analysis for all files
          command: |
            if [[ "${CIRCLE_BRANCH}" != "master" ]] && [[ "${CIRCLE_BRANCH}" != "release" ]] && [[ -z "${CIRCLE_TAG}" ]]; then
              tools/scripts/phpstan-pr-all-files.sh
            fi
      - run:
          name: Run PHP insight
          command: |
            if [[ "${CIRCLE_BRANCH}" != "master" ]] && [[ "${CIRCLE_BRANCH}" != "release" ]] && [[ -z "${CIRCLE_TAG}" ]]; then
              php artisan insights  --no-interaction
            fi

  run_test:
    description: "Run test"
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-composer-{{ checksum "composer.lock" }}
      - run:
          name: Copy environment variables
          command: |
            cp .env.example .env
      - run:
          name: Install composer packages
          command: |
            composer install
      - save_cache:
          key: dependency-cache-composer-{{ checksum "composer.lock" }}
          paths:
            - ~/app/vendor
      - run:
          name: Do static analysis
          command: |
            php -d memory_limit=4G vendor/bin/phpstan analyse
      - run:
          name: Test
          command: |
            php artisan key:generate
            php artisan jwt:secret -f
            DB_CONNECTION=testing_mysql DB_HOST=127.0.01 DB_DATABASE=testing_db vendor/bin/phpunit

  # for vm based deployment
  use_capistrano_to_deploy:
    description: "Deploy"
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-rubygem-{{ checksum "Gemfile.lock" }}
      - run:
          name: Copy environment variables
          command: |
            cp .env.example .env
      - run:
          name: Fix host authenticity for wiki.onramplab.com
          command: |
            ssh-keyscan wiki.onramplab.com >> ~/.ssh/known_hosts
      - deploy:
          command: |
            gem install bundler -v 1.17.3
            bundle check || bundle install

            echo "current branch is ${CIRCLE_BRANCH}"
            echo "current tag is ${CIRCLE_TAG}"

            if [[ -n "${CIRCLE_TAG}" ]]; then
              USERNAME=${CIRCLE_USERNAME} VIA_BASTION=1 CI_BRANCH="${CIRCLE_TAG}" cap production deploy --trace
            elif [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              USERNAME=${CIRCLE_USERNAME} VIA_BASTION=1 CI_BRANCH=master cap staging deploy --trace
            fi

      - save_cache:
          key: dependency-cache-rubygem-{{ checksum "Gemfile.lock" }}
          paths:
            - /var/lib/gems
            - /usr/local/bin/cap
            - /usr/local/bin/capify

jobs:
  run_test:
    <<: *defaults
    steps:
      - run_test
      - run_phpcs_phpstan

  use_capistrano_to_deploy_staging:
    docker:
      - image: circleci/ruby:2.4.2-jessie-node

    steps:
      - use_capistrano_to_deploy

  use_capistrano_to_deploy_prod:
    docker:
      - image: circleci/ruby:2.4.2-jessie-node

    steps:
      - use_capistrano_to_deploy

  # build-staging-image:
  #   executor: aws-ecr/default
  #   steps:
  #     - aws-ecr/build-and-push-image:
  #         account-url: AWS_ECR_ACCOUNT_URL
  #         aws-access-key-id: AWS_ACCESS_KEY_ID
  #         aws-secret-access-key: AWS_SECRET_ACCESS_KEY
  #         create-repo: false
  #         dockerfile: Dockerfile
  #         path: .
  #         region: AWS_REGION
  #         repo: laravel-starter
  #         tag: "latest,release-${CIRCLE_SHA1}"
  #         extra-build-args: "--target php-prod"

  # build-production-image:
  #   executor: aws-ecr/default
  #   steps:
  #     - aws-ecr/build-and-push-image:
  #         account-url: AWS_ECR_ACCOUNT_URL
  #         aws-access-key-id: AWS_ACCESS_KEY_ID
  #         aws-secret-access-key: AWS_SECRET_ACCESS_KEY
  #         create-repo: false
  #         dockerfile: Dockerfile
  #         path: .
  #         region: AWS_REGION
  #         repo: laravel-starter
  #         tag: "${CIRCLE_TAG}"
  #         extra-build-args: "--target php-prod"

  # create-deployment:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         Name of the EKS cluster
  #       type: string
  #     aws-region:
  #       description: |
  #         AWS Region
  #       type: string
  #   steps:
  #     - checkout

  #     - kustomize/install:
  #         version: v3.8.4

  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         authenticator-release-tag: v0.5.1
  #         cluster-name: << parameters.cluster-name >>
  #         aws-region: << parameters.aws-region >>
  #         install-kubectl: true

  #     - run:
  #         name: Update image tag and deploy
  #         command: |
  #             ENVIRONMENT="staging"
  #             TAG="release-${CIRCLE_SHA1}"

  #             if [ -n "${CIRCLE_TAG}" ]; then
  #               ENVIRONMENT="production"
  #               TAG="${CIRCLE_TAG}"
  #             fi

  #             root=$(pwd)

  #             echo "deploying ${TAG} to ${ENVIRONMENT}"

  #             cd ${root}/tools/infrastructure/container-based/ochestration/kubernetes/bases
  #             kustomize edit set image "laravel-starter=account_id.dkr.ecr.us-east-1.amazonaws.com/laravel-starter:${TAG}"

  #             cd ${root}/tools/infrastructure/container-based/ochestration/kubernetes/${ENVIRONMENT}/bases
  #             kustomize build | kubectl apply -f -

workflows:
  version: 2
  build-deploy:
    jobs:
      - run_test:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/

      # - build-staging-image:
      #     requires:
      #       - run_test
      #     filters:
      #       branches:
      #         only: master

      # - build-production-image:
      #     requires:
      #       - run_test
      #     filters:
      #       tags:
      #         only: /^v.*/
      #       branches:
      #         ignore: /.*/

      # for staging
      # - create-deployment:
      #     cluster-name: laravel-starter-staging-eks-cluster
      #     aws-region: "${AWS_REGION}"
      #     requires:
      #       - build-staging-image
      #     filters:
      #       branches:
      #         only: master

      # for production
      # - create-deployment:
      #     cluster-name: laravel-starter-production-eks-cluster
      #     aws-region: "${AWS_REGION}"
      #     requires:
      #       - build-production-image
      #     filters:
      #       tags:
      #         only: /^v.*/
      #       branches:
      #         ignore: /.*/

      # for vm-based deployment
      # - use_capistrano_to_deploy_staging:
      #     requires:
      #       - run_test
      #     filters:
      #       branches:
      #         only: master

      # - use_capistrano_to_deploy_prod:
      #     requires:
      #       - run_test
      #     filters:
      #       tags:
      #         only: /^v.*/
      #       branches:
      #         ignore: /.*/


# notify:
#   webhooks:
#     - url: your slack or teams webhook url
